include "baker.conf"

bakery {

  api-port = 8080
  api-port = ${?API_PORT}

  api-url-prefix = "/api/bakery"

  api-logging-enabled = false
  api-logging-enabled = ${?API_LOGGING_ENABLED}

  metrics-port = 9095
  metrics-port = ${?METRICS_PORT}

  akka-cluster-selector = "akka-cluster"
  akka-cluster-selector = ${?STATE_CLUSTER_SELECTOR}

  interaction-configuration-classes = []

}

baker {

  actor {
    provider = "cluster-sharded"
    idle-timeout = 1 minute
  }

  allow-adding-recipe-without-requiring-instances = true

  kafka-event-sink {
    enabled: true,
    enabled: ${?KAFKA_EVENT_SINK_ENABLED},
    bootstrap-servers: "kafka-event-sink:9092",
    bootstrap-servers: ${?KAFKA_EVENT_SINK_BOOTSTRAP_SERVERS},
    baker-events-topic: "baker-events",
    baker-events-topic: ${?KAFKA_EVENT_SINK_BAKER_EVENTS_TOPIC},
    recipe-events-topic: "recipe-events"
    recipe-events-topic: ${?KAFKA_EVENT_SINK_RECIPE_EVENTS_TOPIC},
  }
}
akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  jvm-exit-on-fatal-error = false
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  cluster {
    roles = ["state-node"]
    min-nr-of-members = 1
    configuration-compatibility-check.enforce-on-join = off
    sharding.remember-entities = on
  }

  discovery {
    kubernetes-api {
      pod-label-selector = "akka-cluster=%s"
    }
  }

  http.host-connection-pool.idle-timeout = 21474835s

  management {
    http.routes {
      cluster-management = ""
    }
    cluster.bootstrap {
      contact-point-discovery {
        # For the kubernetes API this value is substituted into the %s in pod-label-selector
        service-name = ${bakery.akka-cluster-selector}

        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api

        required-contact-point-nr = 1
      }
    }
    health-checks {
      readiness-path = "health/ready"
      liveness-path = "health/alive"
      liveness-checks {
        cluster-health = "com.ing.bakery.baker.ClusterHealthCheck"
      }
      readiness-checks {
        name = "com.ing.bakery.baker.BakerReadinessCheck"
      }
    }
  }
}

kamon {
  prometheus.start-embedded-http-server = no
  modules.prometheus-reporter.enabled = false

  instrumentation.akka.filters {
    actors.track {
      includes = [ "baker/user/ProcessIndexActor", "baker/user/RecipeManager" ]
      excludes = [ "baker/system/**" ]
    }
    dispatchers {
      includes = [ "baker/akka.actor.default-dispatcher" ]
    }
    routers {
      includes = [ ]
    }
  }

}